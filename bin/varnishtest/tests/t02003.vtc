varnishtest "H2 Stream error conditions"

server s1 {
	rxreq
	txresp
} -start

varnish v1 -vcl+backend {} -start

varnish v1 -cliok "param.set feature +http2"
varnish v1 -cliok "param.set debug +syncvsl"

#######################################################################
# Test Even stream numbers

client c1 {
	stream 0 {
		rxgoaway
		expect goaway.laststream == 0
		expect goaway.err == PROTOCOL_ERROR
	} -start
	stream 2 {
		sendhex "000003 80 00 00000002 010203"
		txprio
	} -run
	stream 0 -wait
} -run

#######################################################################
# Test reverse order stream numbers

client c1 {
	stream 0 {
		rxgoaway
		expect goaway.laststream == 3
		expect goaway.err == PROTOCOL_ERROR
	} -start
	stream 3 {
		txprio
	} -run
	stream 1 {
		txprio
	} -run
	stream 0 -wait
} -run

#######################################################################
# Test WINDOW_UPDATE error conditions

client c1 {
	stream 1 {
		txprio
		txwinup -size 0
		rxrst
		expect rst.err == PROTOCOL_ERROR
	} -run
	stream 3 {
		txprio
		txwinup -size 0x40000000
		txwinup -size 0x40000000
		rxrst
		expect rst.err == FLOW_CONTROL_ERROR
	} -run
	stream 0 {
		rxgoaway
		expect goaway.laststream == 5
		expect goaway.err == FRAME_SIZE_ERROR
	} -start
	stream 5 {
		txprio
		sendhex "000003 08 00 00000005 010203"
	} -run
	stream 0 -wait
} -run
client c1 {
	stream 0 {
		txwinup -size 0x40000000
		txwinup -size 0x40000000
		rxgoaway
		expect goaway.laststream == 0
		expect goaway.err == FLOW_CONTROL_ERROR
	} -run
} -run

client c1 {
	stream 1 {
		txreq
		rxresp
	} -run
	stream 1 {
		# WINDOW_UPDATE on closed stream
		txwinup -size 0x4000
	} -run
} -run

#######################################################################
# Test PING error conditions

client c1 {
	stream 0 {
		txping -ack -data "FOOBAR42"
		rxgoaway
		expect goaway.laststream == 0
		expect goaway.err == PROTOCOL_ERROR
	} -run
} -run

client c1 {
	stream 0 {
		sendhex "000008 06 80 00000001 0102030405060708"
		rxgoaway
		expect goaway.laststream == 0
		expect goaway.err == PROTOCOL_ERROR
	} -run
} -run

#######################################################################
# Test PUSH_PROMISE error conditions

client c1 {
	stream 0 {
		rxgoaway
		expect goaway.err == PROTOCOL_ERROR
		expect goaway.laststream == 1
	} -start
	stream 1 {
		txprio
		sendhex "000008 05 00 00000001 0001020304050607"
	} -run
	stream 0 -wait
} -run

# Test RST_STREAM error conditions

client c1 {
	stream 0 {
		# RST idle stream
		sendhex "000004 03 00 00000007 00000008"
		rxgoaway
		expect goaway.err == PROTOCOL_ERROR
		expect goaway.laststream == 0
	} -run
} -run

client c1 {
	stream 0 {
		rxgoaway
		expect goaway.err == FRAME_SIZE_ERROR
		expect goaway.laststream == 1
	} -start
	stream 1 {
		txprio
		# RST wrong length
		sendhex "000005 03 00 00000001 0000000800"
	} -run
	stream 0 -wait
} -run

client c1 {
	stream 0 {
		# RST stream zero
		sendhex "000000 03 00 00000000 00000008"
		rxgoaway
		expect goaway.err == PROTOCOL_ERROR
		expect goaway.laststream == 0
	} -run
} -run
