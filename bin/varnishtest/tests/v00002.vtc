varnishtest "VCL: test syntax/semantic checks on backend decls. (vcc_backend.c)"

# Missing backend
varnish v1 -errvcl {No backends or directors found in VCL program} {
}

# Reference to non-existent backend
varnish v1 -errvcl {Symbol not found: 'b2' (expected type BACKEND):} {
	backend b1 {
		.host = "127.0.0.1";
	}
	sub vcl_recv {
		set req.backend = b2;
	}
}

# Missing .host
varnish v1 -errvcl {Mandatory field 'host' missing.} {
	backend b1 {
		.port = "http";
	}
}

# Too many .host
varnish v1 -errvcl {Field 'host' redefined at:} {
	backend b1 {
		.host = "foo";
		.host = "bar";
	}
}

# Too many .port
varnish v1 -errvcl {Field 'port' redefined at:} {
	backend b1 {
		.host = "foo";
		.port = "http";
		.port = "https";
	}
}

# Too many .connect_timeout
varnish v1 -errvcl {Field 'connect_timeout' redefined at:} {
	backend b1 {
		.host = "foo";
		.connect_timeout = 1m;
		.connect_timeout = 1m;
	}
}

# unknown field
varnish v1 -errvcl {Unknown field: 'foobar' at} {
	backend b1 {
		.host = "127.0.0.1";
		.foobar = 123;
	}
}

# Check backend reference by name
varnish v1 -errvcl {Expected a backend host specification here, either by name or by {...}} {
	backend b1 { .host = "${bad_ip}"; }
	director r1 random {
		{ .weight = 1; .backend = b1; }
		{ .weight = 1; .backend = { .host = "127.0.0.3"; } }
		{ .weight = 1; .backend = 3745; }  // Brownie points for getting the joke
	}
}

# Check backend reference by name
varnish v1 -errvcl "Expected '{' got 'b1'" {
	backend b1 { .host = "${bad_ip}"; }
	backend b2 b1;
}

# Check backend reference by non-C-compat name
varnish v1 -errvcl {Identifier 'b-1' contains illegal characters, use [0-9a-zA-Z_] only.} {
	backend b-1 { .host = "${bad_ip}"; }
}

# Check backend reference by non-C-compat name
varnish v1 -errvcl {Symbol not found: 'b-1' (expected type BACKEND):} {
	backend b1 { .host = "${bad_ip}"; }
	sub vcl_recv {
		set req.backend = b-1;
	}
}

# Old backend syntax
varnish v1 -errvcl {Remove "set" and "backend" in front of backend fields.} {
	backend b1 {
		set host = "127.0.0.1";
	}
}

# Too many .connect_timeout
varnish v1 -errvcl {Unknown time unit 'q'.  Legal are 's', 'm', 'h' and 'd'} {
	backend b1 {
		.host = "foo";
		.connect_timeout = 1 q;
	}
}

# Two clashing backends
varnish v1 -errvcl {Backend b1 redefined} {
	backend b1 { .host = "127.0.0.1"; }
	backend b1 { .host = "127.0.0.1"; }
}

# Unknown director policy
varnish v1 -errvcl {Unknown director policy: 'anarchy' at} {
	director r1 anarchy { .host = "127.0.0.1"; }
}

varnish v1 -errvcl {Backend host "v00002.freebsd.dk": resolves to multiple ipv4 addresses.} {
	/* too many IP numbers */
	backend b1 { .host = "v00002.freebsd.dk"; }
}

varnish v1 -errvcl {Backend host '"////."' could not be resolved to an IP address:} {
	backend b1 { .host = "////."; }
}

varnish v1 -errvcl {Backend host '"127.0.0.1"' could not be resolved to an IP address:} {
	backend b1 { .host = "127.0.0.1"; .port = "////."; }
}

varnish v1 -errvcl {Unknown field: 'foobar' at} {
	backend b1 {
		.host = "127.0.0.1";
		.foobar = "foo";
	}
}

varnish v1 -errvcl {Unknown field: 'ice' at} {
	backend b1 {
		.host = "127.0.0.1";
		.probe = {
			.ice = "vanilla";
		}
	}
}

varnish v1 -errvcl {Must specify .threshold with .window} {
	backend b1 {
		.host = "127.0.0.1";
		.probe = { .window = 8; }
	}
}

varnish v1 -errvcl {Threshold must be 64 or less.} {
	backend b1 {
		.host = "127.0.0.1";
		.probe = { .threshold = 65; }
	}
}

varnish v1 -vcl {
	backend b1 {
		.host = "127.0.0.1";
		.probe = { .threshold = 64; }
	}
}

varnish v1 -errvcl {Window must be 64 or less.} {
	backend b1 {
		.host = "127.0.0.1";
		.probe = { .threshold = 32; .window = 65; }
	}
}

varnish v1 -vcl {
	backend b1 {
		.host = "127.0.0.1";
		.probe = { .threshold = 32; .window = 64; }
	}
}

varnish v1 -errvcl {Threshold can not be greater than window.} {
	backend b1 {
		.host = "127.0.0.1";
		.probe = { .threshold = 32; .window = 31; }
	}
}

varnish v1 -errvcl {Must specify .expected_response with exactly three digits (100 <= x <= 999)} {
	backend b1 {
		.host = "127.0.0.1";
		.probe = { .expected_response = 13; }
	}
}
