varnishtest "client h1 send timeouts - tcp"

# XXX See https://github.com/varnishcache/varnish-cache/pull/2980#issuecomment-486214661
feature cmd {test $(uname) != "SunOS" && test $(uname) != "Darwin"}

feature SO_RCVTIMEO_WORKS

barrier b1 cond 2 -cyclic
barrier b2 cond 2 -cyclic

server s1 -repeat 2 {
	fatal
	rxreq
	txresp -nolen -hdr "Transfer-encoding: chunked"
	chunkedlen 100000
	# make sure varnish is stuck in delivery
	barrier b1 sync
	non_fatal
	chunkedlen 0
} -start

varnish v1 -cliok "param.set debug +syncvsl"
varnish v1 -cliok "param.set debug +flush_head"
varnish v1 -cliok "param.set thread_pools 1"
varnish v1 -cliok "param.set timeout_idle 1"
varnish v1 -cliok "param.set idle_send_timeout .1"
varnish v1 -cliok "param.set send_timeout .1"

varnish v1 -vcl+backend {
	import debug;
	sub vcl_recv {
		if (req.url == "/longsend") {
			# client -rcvbuf 256 is super inefficient, so
			# we need a very long timeout
			set sess.send_timeout = 20s;
		} else
		if (req.url == "/longidlesend") {
			set sess.idle_send_timeout = 20s;
		}
	}

	sub vcl_hash {
		hash_data("/");
		return (lookup);
	}

	sub vcl_deliver {
		debug.sndbuf(256b);
	}
} -start

# l0 signals when to raise the barrier
# l1 checks for the TX_ERROR in the same session

logexpect l0 -v v1 -g raw {
	expect * * ReqURL	"^/$"
	expect * = Debug	"^Hit total send timeout"
} -start

logexpect l1 -v v1 -g session -q "ReqURL ~ \"^/$\"" {
	expect * * SessClose "^TX_ERROR"
	expect * * Debug "^Hit total send timeout"
} -start

client c1 -rcvbuf 256 {
	txreq
	rxresphdrs
	# varnish is stuck sending the chunk
	barrier b1 sync
	# wait for the timeout to kick in
	barrier b2 sync
} -start

client c2 -rcvbuf 256 {
	txreq -url /longsend
	rxresphdrs
	delay 0.8
	rxrespbody
	expect resp.bodylen == 100000
} -start

logexpect l0 -wait
barrier b2 sync
logexpect l1 -wait
client c1 -wait
client c2 -wait

varnish v1 -cliok "param.reset send_timeout"

varnish v1 -cliok "ban obj.status != 0"

# l2 signals when to raise the barrier
# l3 checks the idle send timeout in the right transaction
# l4 checks for no idle send timeout with the prolonged timeout

logexpect l2 -v v1 -g raw {
	expect * * ReqURL	"^/$"
	expect * = Debug	"^Hit idle send timeout"
} -start


logexpect l3 -v v1 -q "ReqURL ~ \"^/$\"" {
	expect * * ReqURL	"^/$"
	expect * = RespHeader	"^Transfer-Encoding"
	expect 0 = Debug	"^Hit idle send timeout"
} -start

logexpect l4 -v v1 -q "ReqURL ~ \"^/longidlesend$\"" {
	expect * * ReqURL	"^/longidlesend$"
	expect * = RespHeader	"^Transfer-Encoding"
	# no Hit idle send ...
	expect 0 = Timestamp	"^Resp"
} -start

client c1 -start

client c3 -rcvbuf 256 {
	txreq -url /longidlesend
	rxresphdrs
	delay 1.8
	rxrespbody
	expect resp.bodylen == 100000
} -start

logexpect l2 -wait
barrier b2 sync
client c1 -wait
client c3 -wait
logexpect l3 -wait
logexpect l4 -wait
